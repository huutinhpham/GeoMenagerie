uniform int outputID;
uniform sampler2D envmap;
uniform vec3 eyePos;
varying vec3 normal;
varying vec3 vertex;

#define PI 3.1415926

vec3 shadeDiffuseFromEye();

vec3 shadePhong(vec3 lightPos);

vec3 shadeEnvmapReflection();

void main()
{
    if(outputID == 0)
    {
        gl_FragColor = vec4(shadeDiffuseFromEye(), 1.0);
        return;
    }
    if(outputID == 1)
    {
        gl_FragColor = vec4(shadePhong(vec3(10, 10, 10)), 1.0);
        return;
    }
    if(outputID == 2)
    {
        gl_FragColor = vec4(shadeEnvmapReflection(), 1.0);
        return;
    }
    if(outputID == 3)
    {
        // Do something interesting here for extra credit.
        // gl_FragColor = vec4(???, 1.0);
        // return;
    }
    // ...
}

vec3 shadeDiffuseFromEye()
{
    vec3 n = normalize(normal);
    vec3 out_vec = normalize(eyePos - vertex);
    float diffuse = abs(dot(out_vec, n));
    return vec3(diffuse);
}

vec3 shadePhong(vec3 lightPos)
{   // TODO Part 6.
    // TODO Compute Phong shading here. You can choose any color you like. But please
    // TODO make sure that you have noticeable specular highlights in the shading.
    // TODO Variables to use: eyePos, lightPos, normal, vertex
    
    //setup
    vec3 lightColor = vec3(255, 0, 0);
    vec3 ambientTerm = vec3(0.1, 0.1, 0.1);
    vec3 n = normalize(normal);
    vec3 lightVector = normalize(lightPos - vertex);
    vec3 viewVector = normalize(eyePos - vertex);


    //diffuse
    float diffuseTerm = 0.3*max(dot(n, lightVector), 0);

    //specular 
    vec3 bisector = normalize(viewVector + lightVector);
    float specularTerm = 0.5*pow(max(0, dot(n, bisector)), 20.0);

    return (ambientTerm + vec3(diffuseTerm) + vec3(specularTerm)) + lightColor;
}

vec3 shadeEnvmapReflection()
{   // TODO Part 6.
    // TODO Compute environment mapping based on reflection direction here.
    // TODO First compute the reflection direction using eyePos, normal and vertex.
    // TODO Then convert the reflection direction to spherical coordinates (theta, phi). 
    // TODO Note that the up vector is along +Z axis.
    // TODO Finally, grab the color from envmap using (theta, phi).
    // TODO You will need to use function "vec4 texture2D(sampler2D tex, vec2 uv)" to 
    // TODO get colors from textures. 

    vec3 n = normalize(normal);
    vec3 viewPoint = normalize(eyePos - vertex);
    vec3 refDir = (dot(viewPoint, n)*2.0)*n - viewPoint;
    float theta = atan(refDir.y, refDir.x);
    float phi = atan(sqrt(pow(refDir.x, 2) + pow(refDir.y, 2)), refDir.z);
    vec2 uv = vec2(theta/(2.0*PI), phi/PI);

    return texture2D(envmap, uv).xyz;
}
